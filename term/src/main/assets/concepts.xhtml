<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
<html xmlns="http://www.w3.org/1999/xhtml">
<!--  
 * Copyright (C) 2014-2018 Thorbjørn Hansen.
 * 
 * The help content is *not* under an Apache License. I have not
 * decided on its license yet. Contact me at thorbj.hansen@gmail.com
 * if you want to copy, publish or use it outside of TTerm.
-->
<head>%
  <title>TTerm – Concepts</title>
  <!-- Also injects CSS style sheets. -->
  <script>prefix="";</script>
  <script src="lib/doc.js"/>
</head>
<body>

<div class="header">TTerm – Concepts</div>

<p><a href="1-index.xhtml">Back to index.</a></p>

<p id="thh-toc-toc"></p>


<h1>Concepts</h1>
<!-- ************************************************************ -->

<p>Trying to run Unix commands on Android means you will come in
contact with the Unix / Linux community. They are wonderful &mdash;
hey, they give their work away for free, and often it's even unpaid
work. But they often seem to assume that you know more than you
actually do. Or maybe it's just me.</p>

<p>Since I remember how it feels to read through documentation and
only understand half of it (like, yesterday and the day before), I'll
try to document all concepts mentioned in the help pages of TTerm
here.</p>

<p>All Android concepts are capitalized, e.g. "Android User", other
concepts are not, e.g. "Linux user". Why? Because Google likes to
change the names of Android concepts. And when some Google employee
decides “Let's not call it
  <i><a href="https://developer.android.com/reference/android/preference/PreferenceActivity.html"
        >preferences</a></i> 
anymore, let's call it 
  <i><a href="https://material.io/guidelines/patterns/settings.html"
        >settings</a></i>.”, then it's nice to be able to find the
terms with
  <a href="commands.xhtml#grep"
     ><c>grep</c></a>
to change them.</p>

<p>My personal favorite is the terminology of the 
  <a href="#sd_card"
     >SD cards</a>. 
Some Google employee must have decided “Let's let the path
<c>/sdcard</c> point to
  <i><a href="https://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        >internal (non-removable) storage</a></i>.”
and some other employee must have thought “Well, then we'll need to
call the real SD card something else, let's call it
  <i><a href="https://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        >removable storage media</a></i>.” 
and some other employee must have decided “Nah, I'll call it
  <i><a href="https://source.android.com/devices/storage/traditional"
        >semi-permanent external storage</a></i> 
or 
  <i><a href="https://source.android.com/devices/storage/traditional"
        >portable external storage</a></i>
instead.”. Most people gave up, everybody outside Google calls it
<i>internal SD card</i> and <i>external SD card</i>, which Google
stubbornly refuses to acknowledge.</p>


<h1 id="android_os_system_properties">Android OS System Properties</h1>
<!-- ************************************************************ -->

<p>Android's Linux layer has <dfn>system properties</dfn>, I'll call them
<dfn>Android OS System Properties</dfn>, that are different from the Java
system properties. You can get them with
  <a href="commands.xhtml#getprop"
     ><c>getprop</c></a>
and set them with 
  <a href="commands.xhtml#setprop"
     ><c>setprop</c></a>.</p>


<h1 id="cpu_architecture">CPU architecture</h1>
<!-- ************************************************************ -->

<p>When I use <dfn>CPU architecture</dfn>, I mean the <dfn>instruction set
architecture</dfn>.</p>

<p>Most Android devices have an ARM CPU architecture.</p>


<h5>List of CPU architectures</h5>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<p>Until now I've encountered these CPU architectures for Android
devices:</p>

<ul>
  <li>
    <dfn>arm</dfn>
  
    <p>An <dfn>ARM architecture</dfn> has a name like ‘ARMv«n»’ (with
    ‘v’).</p>
    
    <p>An <dfn>ARM family</dfn> has a name like ‘ARM«n»’ or ‘ARM
    Cortex-A‹n›’ (without ‘v’).</p>

    <p>For example, the ARM family ARM11 uses the ARM architecture
    ARMv6.</p>
  </li>

  <li>
    <dfn>arm64</dfn>, aka <dfn>aarch64</dfn>
  
    <p>A 64-bit versions of ARM.</p>
  </li>

  <li>
    <dfn>mips</dfn>
  </li>
  
  <li>
    <dfn>x86</dfn>

    <p>The 32-bit versions of PC CPUs.</p>
  
    <p>An <dfn>i686</dfn> ("P6 microarchitecture") is a x86.</p>
  </li>

  <li>
    <dfn>x86-64</dfn>, aka <dfn>x64</dfn>, <dfn>x86_64</dfn>,
    <dfn>amd64</dfn>

    <p>The 64-bit versions of PC CPUs.</p>
  </li>

</ul>

<p>For lists of CPU architectures, consult:</p>

<ul>
  <li>
    <a href="https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures#Instruction_sets"
       >Wikipedia's "Comparison of instruction set architectures"</a></li>

  <li>
    <a href="https://en.wikipedia.org/wiki/List_of_instruction_sets"
       >Wikipedia's "List of instruction sets"</a></li>

</ul>


<h5>Find out the CPU architecture</h5>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<p class="TODO">TODO How do you find out your device's CPU
architecture? This looks promising:</p>

<p class="indent code">
  getprop | sort | fgrep ro.product.cpu            <br/>
  ro.product.cpu.abi]: [armeabi-v7a]               <br/>
  ro.product.cpu.abi2]: [armeabi]                  <br/>
  ro.product.cpu.abilist]: [armeabi-v7a,armeabi]   <br/>
  ro.product.cpu.abilist32]: [armeabi-v7a,armeabi] <br/>
  ro.product.cpu.abilist64]: []
</p>

<p class="TODO">TODO Find out how terms like arm, armeabi and
armeabi-v7a are related.</p>


<h1 id="custom_rom">Custom ROM</h1>
<!-- ************************************************************ -->

<p>When you buy an Android device, the device's preinstalled version
of Android is called the <dfn>stock ROM</dfn>.</p>

<p>For some devices, people have built <dfn>custom ROMs</dfn> to
replace the stock ROM, for example
  <a href="#custom_rom/lineageos"
     >LineageOS</a>.
Custom ROMs are usually alternative versions of Android, but could
even be a different operating system.</p>

<p>Installing a Custom ROM usually involves "unlocking the boot
loader", which is outside the scope of this documentation, or
  <a href="rooting.xhtml"
     >rooting</a>.</p>


<h2 id="custom_rom/lineageos">LineageOS</h2>
<!-- ************************************************************ -->

<p><dfn>LineageOS</dfn> is a popular 
  <a href="#custom_rom"
     >Custom ROM</a>
that supports many Android devices.</p>

<p>It's very similar to ordinary Android, its main benefits is that it
doesn't include all the additional junk that most manufacturers add to
Android, and that you can often get newer versions of LineageOS when
your manufacturer stops updating your device's Android. It's the
successor of the popular CyagenMod.</p>

<p>I regularly test TTerm on LineageOS.</p>


<h1>Distribution</h1>
<!-- ************************************************************ -->

<p>See
  <a href="shells.xhtml">Shells and distributions</a>.</p>


<h1 id="env-var">Environment variables</h1>
<!-- ************************************************************ -->

<p>Linux uses <dfn>environment variables</dfn> for configuration.</p>

<p>The set of all environment variables is called
<dfn>environment</dfn>. To see it, use <c>env</c> or <c>env |
sort | more</c>.</p>

<p>To set an environment variable in a shell, use:</p>

<p class="indent code">
  export VAR='value' # (1)<br/>
  export VAR="value" # (2)<br/>
  export VAR=value   # (3)
</p>

<p>In case (1) you must quote a single quote <c>'</c> as
<c>'\''</c>. In case (2) you must quote the four characters
<c>$ \ " `</c> as <c>\$ \\ \" \`</c> (and there may be
additional characters depending on your shell). Strings quoted with
single or double quotes can contain newlines. If you "get stuck" in a
continuation string, press <k>Control-C</k> to get out.</p>

<p>Case (3) is only safe if the value does not contain whitespace or
special characters. You must quote whitespace and many special
characters with <c>\</c>.</p>

<p>To check that you got the quoting right, print an environment value
with <c>echo "$VAR"</c> (the quotes are necessary if the value
contains special characters).</p>

<p>When you start a command or subprocess, it inherits a copy of the
environment. Changes in the copy are not visible in the original
environment.</p>

<p>Do not confuse environment variables with <dfn>shell
variables</dfn>. You set them similarly with <c>VAR='value'</c>
or <c>VAR="value"</c>, without using <c>export</c>. Shell
variables are only used by the shell, they are not part of the
environment and not passed to commands or subprocesses. For example
<c>PWD</c> holds the local directory and <c>PS1</c> the
prompt.</p>

<p>To get a list of all shell variables <i>and</i> environment
variables, use <c>set</c> or <c>set | more</c>.</p>


<h2 id="file">Files</h2>

<h2 id="file/access_rights">File access rights</h2>
<!-- ************************************************************ -->

<p>Unix uses the term <dfn>file mode</dfn> for <dfn>file access
rights</dfn> or <dfn>file permissions</dfn>, you change them with
  <a href="commands.xhtml#chmod"
     ><c>chmod</c></a>.
</p>


<h2 id="file/link">Links</h2>
<!-- ************************************************************ -->

<p>Unix supports 
  <a href="https://en.wikipedia.org/wiki/Symbolic_link"
     ><dfn>soft links</dfn></a>, 
also called "symbolic links", and 
  <a href="https://en.wikipedia.org/wiki/Hard_link"
     ><dfn>hard links</dfn></a>, 
which you can create with
  <a href="commands.xhtml#ln"
     >ln</a>.</p>


<h1 id="sd_card">SD card</h1>
<!-- ************************************************************ -->

<p>The SD cards are my personal favorite of confusing Android
terminology. Some Google employee must have decided “Let's let the
path <c>/sdcard</c> point to
  <i><a href="https://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        >internal (non-removable) storage</a></i>.”
and some other employee must have thought “Well, then we'll need to
call the real SD card something else, let's call it
  <i><a href="https://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        >removable storage media</a></i>.” 
and some other employee must have decided “Nah, I'll call it
  <i><a href="https://source.android.com/devices/storage/traditional"
        >semi-permanent external storage</a></i> 
or 
  <i><a href="https://source.android.com/devices/storage/traditional"
        >portable external storage</a></i>
instead.”. Most people gave up, everybody outside Google calls it
<i>internal SD card</i> and <i>external SD card</i>, which Google
stubbornly refuses to acknowledge.</p>


<h2 id="sd_card/external">External SD card</h2>
<!-- ============================================================ -->

<p>Some Android devices support a real SD card. Android has made such
a mess of it that I won't even try to document it until a later
release.</p>


<h2 id="sd_card/internal">Internal SD card</h2>
<!-- ============================================================ -->

<p>Most current Android devices have a simulated SD card. It's usually
called <dfn>Internal SD Card</dfn>, sometimes "emulated SD card" or
"virtual SD card".</p>

<p>Since Android 4.2, the Internal SD Card of the current user must
be reachable with 
  <a href="files.xhtml#/sdcard/"
     ><c>/sdcard/</c></a>.</p>

<p class="TODO">TODO Document this: To access <c>/sdcard</c>, you must
give TTerm the Permission Storage.</p>


<h1 id="selinux">SELinux</h1>
<!-- ************************************************************ -->

<p>Android includes <dfn>SELinux</dfn>, which stands for <dfn>Security
Enhanced Linux</dfn>, which is about all I know about it. If I find
out a use for SELinux TTerm, I'll document it here.</p>


<h1 id="shell">Shell</h1>
<!-- ************************************************************ -->

<p>Android runs on top of a (small) Linux layer. To call Linux
commands interactively, you need a <i>shell</i> and a
  <a href="#terminal"
     >terminal emulator</a>.</p>

<p>The <dfn>shell</dfn> executes the Linux commands that you type. The
corresponding thing in Windows are the two "command shells" <c>cmd</c>
and <c>powershell</c>.</p>

<p>Linux offers many different shells. All of them will let you type
commands and arguments, and set 
  <a href="#env-vars"
     >environment variables</a>, 
as long as you quote special characters. They also contain a
programming language to write shell scripts, but I sincerely hope that
we won't need that for TTerm, since it lies somewhere between a
surreal dream and a nightmare.</p>

<p>For more details, see
  <a href="shells.xhtml">Shells and distributions</a>.</p>


<h5>Further reading</h5>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<ul>
  <li>A shell is a "command line interpreter", abbreviated CLI, read
  more about 
    <a href="https://en.wikipedia.org/wiki/Shell_(computing)#Text_(CLI)_shells"
       >CLI shells</a> and 
    <a href="https://en.wikipedia.org/wiki/Command-line_interface"
       >command-line interfaces</a>.</li>
</ul>


<h1 id="storage">Storage</h1>
<!-- ************************************************************ -->

<h2 id="storage/external">External Storage</h2>
<!-- ============================================================ -->

<p>An Android device must support <dfn>External Storage</dfn>.</p>

<p>Currently, it's usually an
  <a href="#sd_card/internal"
     >Internal SD Card</a>
sometimes also an
  <a href="#sd_card/external"
     >External SD Card</a>, 
rarely only an External SD Card.</p>


<h2 id="storage/internal">Internal Storage</h2>
<!-- ============================================================ -->

<p>Every app gets its own private <dfn>Internal Storage</dfn>. By
default, it is in</p>

<p class="indent code">
  /data/user/‹user id›/‹package name›/ 
</p>

<p>The Internal Storage is deleted when you uninstall the app.</p>


<h3>TTerm's Internal Storage</h3>
<!-- –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––– -->

<p>TTerm's Internal Storage for the default Android User with the User
ID 0 is in</p>

<p class="indent code">
  <a href="files.xhtml#/data/user/0/de.t2h.tterm/"
     >/data/user/0/de.t2h.tterm/</a>
</p>

<p>For the User ID 0, that path is a soft link to</p>

<p class="indent code">
  <a href="files.xhtml#/data/data/de.t2h.tterm/"
     >/data/data/de.t2h.tterm/</a>
</p>


<h3 id="storage/internal/share">Sharing Internal Storage</h3>
<!-- –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––– -->

<p>Up to Android 6, it was possible to share the Internal Storage of
an app with other apps by making it <dfn>world readable</dfn> or
<dfn>world writable</dfn>. This is no longer possible in Android 7+.</p>

<p>This does not depend on the version of Android <i>running</i> on
your device, only on the version the app is <i>compiled for</i>.</p>

<p>Up to Android 6, this was possible because the
  <a href="#file/access_rights"
     >file access rights</a>
of an Internal Storage like <c>/data/data/de.t2h.tterm/</c> were as
follows (you need a
  <a href="rooting.xhtml"
     >rooted device</a>
to do this on your own device):</p>

<p class="indent code">
  $ su -c "ls -god /data"                          <br/>       
  drwxrwx--x  38 4096 2018-02-01 17:56 /data       <br/> 
                                                   <br/> 
  $ su -c "ls -god /data/data"                     <br/> 
  drwxrwx--x 153 8192 2018-02-11 00:09 /data/data  <br/> 
                                                   <br/> 
  $ su -c "ls -god /data/data/de.t2h.tterm"        <br/> 
  drwx-----x   6 4096 2018-02-08 00:13 /data/data/de.t2h.tterm
</p>

<p>Note that all directories have the rights <c>--x</c> for "other",
which means that other apps can't list the contents of the directory,
but <i>can</i> access contents of the directory if they know their
files name.</p>

<p>Apps <i>compiled for</i> Android 7 have these file access
rights:</p>

<p class="indent code">
  $ su -c "ls -god /data/data/de.t2h.tterm"        <br/> 
  drwx------   6 4096 2018-02-08 00:13 /data/data/de.t2h.tterm
</p>

<p>That's why you can't share Internal Storage anymore.</p>


<h1>Terminal, terminal emulator</h1>
<!-- ************************************************************ -->

<p>Android runs on top of a (small) Linux layer. To call Linux
commands interactively, you need a <i>shell</i> and a <i>terminal
emulator</i>.</p>

<p>TTerm is the <dfn>terminal emulator</dfn>. It displays your input
(what you type) and the commands' output, but it doesn't actually
execute any Linux commands. That's the job of the
  <a href="#shell"
    >shell</a>.</p>

<p>For more details, see
  <a href="shells.xhtml">Shells and distributions</a>.</p>


<h5>Further reading</h5>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<ul>
  <li>Read more about <a href="https://en.wikipedia.org/wiki/Terminal_emulator"
         >terminal emulators</a>.</li>
</ul>


<h2 id="terminal/settings">Terminal settings</h2>
<!-- ============================================================ -->

<p>See
  <a href="commands.xhtml#stty"
     ><c>stty</c></a>, particularly
  <a href="commands.xhtml#stty/sane"
     ><c>stty sane</c></a>.</p>

<p>If you have trouble with the terminal settings in Emacs, see
  <a href="prg/emacs.xhtml#terminal"
     >Emacs terminal size and settings</a>.</p>


<h2 id="terminal/size">Terminal size</h2>
<!-- ============================================================ -->

<p>It's surprisingly difficult to ensure that the currently running
command always knows the current terminal size.</p>

<p>If all goes well, you can query the terminal size with
  <a href="commands.xhtml#stty/size"
     ><c>stty size</c></a>.</p>

<p>If something gets messed up and Linux doesn't know the current
terminal size, use
  <a href="commands.xhtml#stty/rows+cols"
     ><c><b>stty rows</b></c> and <c><b>stty cols</b></c></a>
to set it.</p>

<p>If you have trouble with the terminal size in Emacs, see
  <a href="prg/emacs.xhtml#terminal"
     >Emacs terminal size and settings</a>.</p>


<h5>Further reading</h5>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<ul>
  <li>The excellent article
    <a href="http://www.linusakesson.net/programming/tty/index.php"
       >The TTY demystified</a>.
  </li>
</ul>


<h1 id="user">User</h1>

<h2 id="user/android">Android User</h2>
<!-- ************************************************************ -->

<p>Since Android 4.2, some Android devices support more than one
<dfn>Android User</dfn>.</p>

<p>The default Android User has the <dfn>Android User ID</dfn> 0.</p>

<p>An Android User is not a 
  <a href="#user/linux"
     >Linux user</a>.</p>


<h2 id="user/linux">Linux user</h2>
<!-- ************************************************************ -->

<p>A <dfn>Linux user</dfn> is not the same as an
  <a href="#user/android"
     >Android User</a>. 
It's a user in the Linux layer that Android runs on, for example
<c>system</c> or <c>root</c>.</p>

<p>Each app runs as a separate Linux user. For example, TTerm might
run as the Linux user <c>a0_u123</c>, where <c>a0</c> is the Android
User ID of the default
  <a href="#user/android"
     >Android User</a>,
The number after <c>u</c> will be different on every device.</p>

<p>The command
  <a href="commands.xhtml#whoami"
     ><c>whoami</c></a>
prints the Linux user's name.</p>


<!-- ************************************************************ -->

<footer>
  <hr/>
  <p>Copyright (C) 2014-2018 
  <a href="mailto:thorbj.hansen@gmail.com?subject=TTerm"
     >Thorbjørn Hansen</a></p>
</footer>
</body>
</html>
