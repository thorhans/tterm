<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
<html xmlns="http://www.w3.org/1999/xhtml">
<!--  
 * Copyright (C) 2014-2018 Thorbjørn Hansen.
 * 
 * The help content is *not* under an Apache License. I have not
 * decided on its license yet. Contact me at thorbj.hansen@gmail.com
 * if you want to copy, publish or use it outside of TTerm.
-->
<head>%
  <title>TTerm – Concepts</title>
  <!-- Also injects CSS style sheets. -->
  <script>prefix="";</script>
  <script src="lib/doc.js"/>
</head>
<body>

<div class="header">TTerm – Concepts</div>

<p><a href="1-index.xhtml">Back to index.</a></p>

<p id="thh-toc-toc"></p>


<h1>Concepts</h1>
<!-- ************************************************************ -->

<p>This list is a short documentation of concepts mentioned in the
help pages of TTerm.</p>


<h1 id="android_os_system_properties">Android OS system properties</h1>
<!-- ************************************************************ -->

<p>Android's Linux layer has <dfn>system properties</dfn>, I'll call them
<dfn>Android OS system properties</dfn>, that are different from the Java
System Properties. You can get them with
  <a href="commands.xhtml#getprop"
     ><c>getprop</c></a>
and set them with 
  <a href="commands.xhtml#setprop"
     ><c>setprop</c></a>.</p>


<h1 id="cpu_architecture">CPU architecture</h1>
<!-- ************************************************************ -->

<p>When I use <dfn>CPU architecture</dfn>, I mean the <dfn>instruction set
architecture</dfn>.</p>

<p>Most Android devices have an ARM CPU architecture.</p>


<h5>List of CPU architectures</h5>
<!-- ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ -->

<p>Until now I've encountered these CPU architectures for Android
devices:</p>

<ul>
  <li>
    <dfn>arm</dfn>
  
    <p>An <dfn>ARM architecture</dfn> has a name like `ARMv«n»´ (with
    `v´).</p>
    
    <p>An <dfn>ARM family</dfn> has a name like `ARM«n»´ or `ARM
    Cortex-A‹n›´ (without `v´).</p>

    <p>For example, the ARM family ARM11 uses the ARM architecture
    ARMv6.</p>
  </li>

  <li>
    <dfn>arm64</dfn>, aka <dfn>aarch64</dfn>
  
    <p>A 64-bit versions of ARM.</p>
  </li>

  <li>
    <dfn>mips</dfn>
  </li>
  
  <li>
    <dfn>x86</dfn>

    <p>The 32-bit versions of PC CPUs.</p>
  
    <p>An <dfn>i686</dfn> ("P6 microarchitecture") is a x86.</p>
  </li>

  <li>
    <dfn>x86-64</dfn>, aka <dfn>x64</dfn>, <dfn>x86_64</dfn>,
    <dfn>amd64</dfn>

    <p>The 64-bit versions of PC CPUs.</p>
  </li>

</ul>

<p>For lists of CPU architectures, consult:</p>

<ul>
  <li>
    <a href="https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures#Instruction_sets"
       >Wikipedia's "Comparison of instruction set architectures"</a></li>

  <li>
    <a href="https://en.wikipedia.org/wiki/List_of_instruction_sets"
       >Wikipedia's "List of instruction sets"</a></li>

</ul>


<h5>Find out the CPU architecture</h5>
<!-- ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ -->

<p class="TODO">TODO How do you find out your device's CPU
architecture? This looks promising:</p>

<p class="indent code">
  getprop | sort | fgrep ro.product.cpu            <br/>
  ro.product.cpu.abi]: [armeabi-v7a]               <br/>
  ro.product.cpu.abi2]: [armeabi]                  <br/>
  ro.product.cpu.abilist]: [armeabi-v7a,armeabi]   <br/>
  ro.product.cpu.abilist32]: [armeabi-v7a,armeabi] <br/>
  ro.product.cpu.abilist64]: []
</p>

<p class="TODO">TODO Find out how terms like arm, armeabi and
armeabi-v7a are related.</p>


<h1>Distribution</h1>
<!-- ************************************************************ -->

<p>See
  <a href="shells.xhtml">Shells and distributions</a>.</p>


<h1 id="env-var">Environment variables</h1>
<!-- ************************************************************ -->

<p>Linux uses <dfn>environment variables</dfn> for configuration.</p>

<p>The set of all environment variables is called
<dfn>environment</dfn>. To see it, use <c>env</c> or <c>env |
sort | more</c>.</p>

<p>To set an environment variable in a shell, use:</p>

<p class="indent code">
  export VAR='value' # (1)<br/>
  export VAR="value" # (2)<br/>
  export VAR=value   # (3)
</p>

<p>In case (1) you must quote a single quote <c>'</c> as
<c>'\''</c>. In case (2) you must quote the four characters
<c>$ \ " `</c> as <c>\$ \\ \" \`</c> (and there may be
additional characters depending on your shell). Strings quoted with
single or double quotes can contain newlines. If you "get stuck" in a
continuation string, press `Control-C´ to get out.</p>

<p>Case (3) is only safe if the value does not contain whitespace or
special characters. You must quote whitespace and many special
characters with <c>\</c>.</p>

<p>To check that you got the quoting right, print an environment value
with <c>echo "$VAR"</c> (the quotes are necessary if the value
contains special characters).</p>

<p>When you start a command or subprocess, it inherits a copy of the
environment. Changes in the copy are not visible in the original
environment.</p>

<p>Do not confuse environment variables with <dfn>shell
variables</dfn>. You set them similarly with <c>VAR='value'</c>
or <c>VAR="value"</c>, without using <c>export</c>. Shell
variables are only used by the shell, they are not part of the
environment and not passed to commands or subprocesses. For example
<c>PWD</c> holds the local directory and <c>PS1</c> the
prompt.</p>

<p>To get a list of all shell variables <i>and</i> environment
variables, use <c>set</c> or <c>set | more</c>.</p>


<h1 id="shell">Shell</h1>
<!-- ************************************************************ -->

<p>Android runs on top of a (small) Linux layer. To call Linux
commands interactively, you need a <i>shell</i> and a
  <a href="#terminal"
     >terminal emulator</a>.</p>

<p>The <dfn>shell</dfn> executes the Linux commands that you type. The
corresponding thing in Windows are the two "command shells" <c>cmd</c>
and <c>powershell</c>.</p>

<p>Linux offers many different shells. All of them will let you type
commands and arguments, and set 
  <a href="#env-vars"
     >environment variables</a>, 
as long as you quote special characters. They also contain a
programming language to write shell scripts, but I sincerely hope that
we won't need that for TTerm, since it lies somewhere between a
surreal dream and a nightmare.</p>

<p>For more details, see
  <a href="shells.xhtml">Shells and distributions</a>.</p>


<h5>Further reading</h5>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<ul>
  <li>A shell is a "command line interpreter", abbreviated CLI, read
  more about 
    <a href="https://en.wikipedia.org/wiki/Shell_(computing)#Text_(CLI)_shells"
       >CLI shells</a> and 
    <a href="https://en.wikipedia.org/wiki/Command-line_interface"
       >command-line interfaces</a>.</li>
</ul>


<h1>Terminal, terminal emulator</h1>
<!-- ************************************************************ -->

<p>Android runs on top of a (small) Linux layer. To call Linux
commands interactively, you need a <i>shell</i> and a <i>terminal
emulator</i>.</p>

<p>TTerm is the <dfn>terminal emulator</dfn>. It displays your input
(what you type) and the commands' output, but it doesn't actually
execute any Linux commands. That's the job of the
  <a href="#shell"
    >shell</a>.</p>

<p>For more details, see
  <a href="shells.xhtml">Shells and distributions</a>.</p>


<h5>Further reading</h5>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<ul>
  <li>Read more about <a href="https://en.wikipedia.org/wiki/Terminal_emulator"
         >terminal emulators</a>.</li>
</ul>


<h2 id="terminal/settings">Terminal settings</h2>
<!-- ============================================================ -->

<p>See
  <a href="commands.xhtml#stty"
     ><c>stty</c></a>, particularly
  <a href="commands.xhtml#stty/sane"
     ><c>stty sane</c></a>.</p>

<p>If you have trouble with the terminal settings in Emacs, see
  <a href="prg/emacs.xhtml#terminal"
     >Emacs terminal size and settings</a>.</p>


<h2 id="terminal/size">Terminal size</h2>
<!-- ============================================================ -->

<p>It's surprisingly difficult to ensure that the currently running
command always knows the current terminal size.</p>

<p>If all goes well, you can query the terminal size with
  <a href="../commands.xhtml#stty/size"
     ><c>stty size</c></a>.</p>

<p>If something gets messed up and Linux doesn't know the current
terminal size, use
  <a href="commands.xhtml#stty/rows+cols"
     ><c><b>stty rows</b></c> and <c><b>stty cols</b></c></a>
to set it.</p>

<p>If you have trouble with the terminal size in Emacs, see
  <a href="prg/emacs.xhtml#terminal"
     >Emacs terminal size and settings</a>.</p>


<h5>Further reading</h5>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<ul>
  <li>The excellent article
    <a href="http://www.linusakesson.net/programming/tty/index.php"
       >The TTY demystified</a>.
  </li>
</ul>

<!-- ************************************************************ -->

<footer>
  <hr/>
  <p>Copyright (C) 2014-2018 
  <a href="mailto:thorbj.hansen@gmail.com?subject=TTerm"
     >Thorbjørn Hansen</a></p>
</footer>
</body>
</html>
