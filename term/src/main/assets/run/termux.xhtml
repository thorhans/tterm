<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
<html xmlns="http://www.w3.org/1999/xhtml">
<!--  
 * Copyright (C) 2014-2018 Thorbjørn Hansen.
 * 
 * The help content is *not* under an Apache License. I have not
 * decided on its license yet. Contact me at thorbj.hansen@gmail.com
 * if you want to copy, publish or use it outside of TTerm.
-->
<head>
  <title>TTerm – Termux</title>
  <!-- Also injects CSS style sheets. -->
  <script>prefix="../";</script>
  <script src="../lib/doc.js"/>
</head>
<body>

<div class="header">TTerm – Termux</div>

<p><a href="../shells.xhtml">
  Back to chapter "Shells and distributions".</a></p>

<p id="thh-toc-toc"></p>


<h1>About Termux</h1>
<!-- ************************************************************ -->

<p>Android's Linux layer is very small. The excellent app
  <a href="https://termux.com"
     >Termux</a>
is a Linux distribution that extends Android's Linux with lots of
packages. It runs on Android's Linux and file system, not using
<c>chroot</c> or <c>proot</c> like
  <a href="debian.xhtml" >GNURoot Debian</a>
does. It doesn't require <a href="rooting">rooting</a>. And it has
  <a href="emacs.xhtml" > Emacs</a>, 
hooray!</p>


<h1>Running Termux in TTerm</h1>
<!-- ************************************************************ -->

<p>Termux has its own terminal emulator, but you can use TTerm
instead. (Currently the terminal emulator of Termux handles resizing
better than TTerm, but provides less settings, so try both before you
choose one, or wait until TTerm improves. :-)</p>


<h2 id="run/connect">Connect to Termux</h2>
<!-- ============================================================ -->

<p>In these three approaches, you start Termux and start a program
that you connect to from TTerm.</p>


<h3 id="run/connect/netcat">With Netcat</h3>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<p>You can connect to Termux via
  <a href="../commands.xhtml#netcat"
    >Netcat <c>nc</c></a>. 
Below is a <b>proof of concept</b>. It will let <b>anybody</b> connect
to port 1111 <b>without</b> asking for a password. That's <b>not</b>
something you want to do regularly.</p>

<p>I found the solution on 
  <a href="https://stackoverflow.com/questions/29317933"
    >Stack Overflow</a>.</p>

<p>In Termux, install Busybox:</p>

<p class="indent code">
  apt install busybox
</p>


<p>In Termux, start Netcat and a shell, connected with a "named pipe".
This will accept one connection, then quit.</p>

<p class="indent code">
  cd ~<br/>
  rm -f pipe typescript<br/>
  mkfifo pipe<br/>
  script -q &lt; pipe | nc -l -p 1111 &gt; pipe<br/>
  rm -f pipe typescript<br/>
</p>

<p>Details:</p>

<dl class="code-commented">
  <dt>cd ~</dt>
  <dd>Change to a writable directory, e.g. <c>$HOME</c>.</dd>

  <dt>rm -f pipe typescript</dt>
  <dd>
    If necessary, remove the named pipe and log from a previous run.
  </dd>

  <dt>mkfifo pipe</dt>
  <dd>
    Make a "named pipe", also called a "FIFO" ("First In, First
    Out"). That is a file that connects two processes with a
    bidirectional pipe.
  </dd>
  
  <dt>script -q &lt; pipe | nc -l -p 1111 &gt; pipe</dt>
  <dd>
    <p><c>nc</c> is the BusyBox version of Netcat. It will read input
    from port 1111 and write it to <c>pipe</c>.</p>
    
    <p>In GNURoot Debian you must use <c>netcat</c> instead.</p>

    <p>In some version of Netcat, for example Cygwin's, you have to
    remove the switch <c>-p</c>.</p>

    <!-- On Cygwin, use ‘nc -l 1111’. -->
    
    <p><c>script -q</c> starts a shell that reads input from
    <c>pipe</c> and writes input and output to <c>netcat</c>, which
    writes it to port 1111.</p>
    
    <p class="TODO"><c>script</c> writes a log file <c>typescript</c>
    that we do not need. How do we avoid that?</p>

    <p>In Termux the command stops when you log out in TTerm. In
    GNURoot Debian you have to stop it with <k>Ctrl+c.</k></p>
  </dd>

  <dt>rm -f pipe typescript</dt>
  <dd>
    Remove the named pipe and log from a previous run.
  </dd>
</dl>

<p>Now change to TTerm with an installed 
  <a href="busybox.xhtml">BusyBox</a>.</p>

<p>Netcat does not tell the remote shell the terminal size, so look
it up with 
  <a href="../commands.xhtml#stty/size"
     ><c>stty size</c></a> 
For example</p>

<p class="indent code">
  stty size<br/>
  38 84
</p>

<p>means 38 rows and 84 columns.</p>

<p>Now enter this in a single line:</p>

<p class="indent code">
  stty raw -echo; nc localhost 1111; stty sane
</p>

<!-- On Cygwin, use ‘nc localhost 1111’ in a ‘mintty’ console, it
     does not work in "ConEmu".-->

<p>If you do not enter all three commands in one line, you can't see
what you type for the second and third commands.</p>

<ul>
  <li>
    <p>The first command <c>stty raw -echo</c> sets the terminal
    settings:</p>

    <ul>
      <li>
        <p><a href="../commands.xhtml#stty/raw"
              ><c>stty raw</c></a>
        sets the terminal to <i>raw mode</i>, so that all chars are
        sent immediately to the remote shell, and all chars output by
        the remote shell are shown. That is necessary so a
        <k>Ctrl+C</k> arrives at the <i>remote</i> shell, otherwise it
        stops the <i>local</i> Netcat.</p>
      </li>
      
      <li>
        <p><a href="../commands.xhtml#stty/echo"
              ><c>stty -echo</c></a>
        turns off <i>local</i> echoing, so that the <i>remote</i>
        shell on Termux decides when to echo user input.</p>
      </li>
    </ul>
  </li>
  
  <li>
    <p>The second command <c>nc localhost 111</c> connects to the
    Netcat running on port 1111 of the same device. If <c>localhost</c>
    does not work, try <c>127.0.0.1</c> instead.</p>
  </li>
  
  <li>
    <p>After you quit the shell that runs remotely in Termux, the
    third command
      <a href="../commands.xhtml#stty/sane"
         ><c>stty sane</c></a>
      sets the terminal settings back to their default.</p>
  </li>
</ul>

<p>Now we are in a shell on the remote Termux. Set the terminal size
so the shell on Termux knows it, for example with:</p>

<p class="indent code">
  <a href="../commands.xhtml#stty/rows+cols">stty rows 38 cols 84</a>
</p>

<p>When you exit the remote shell, Netcat on the remote Termux also
exits. To accept another connection, restart it in the remote
Termux.</p>


<h3 id="run/connect/telnet">With Telnet</h3>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<p>You can connect to Termux via Telnet. Below is a <b>proof of
concept</b>. It will let <b>anybody</b> connect to port 2323
<b>without</b> asking for a password. That's <b>not</b> something you
want to do regularly.</p>

<p>In Termux, install Busybox:</p>

<p class="indent code">
  apt install busybox
</p>

<p>Start a Telnet daemon in Termux:</p>

<dl class="code-commented">
  <dt>telnetd -p 2323 -l bash -F</dt>
  <dd>
    <p><c>-p 2323</c> makes the Telnet daemon listen to port
    2323. The port must be over 1024.</p>
  
    <p><c>-l bash</c> makes it run the shell <c>bash</c>
    instead of <c>login</c>.</p>

    <p><c>-F</c> makes it run in the foreground.</p>
  </dd>
</dl>

<p>In TTerm with an installed 
  <a href="busybox.xhtml">BusyBox</a>, 
do the following:</p>

<dl class="code-commented">
  <dt>telnet localhost 2323</dt>
  <dd>Telnet connects to port 2323 on the same device. If
  <c>localhost</c> does not work, try <c>127.0.0.1</c>
  instead.</dd>
</dl>

<p>When you've finished testing, stop the Telnet daemon in Termux with
<k>Ctrl+c</k>.</p>


<h3>With SSH</h3>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<p class="TODO">LATER I will write about this when I've found a SSH
client that runs in TTerm.</p>

<p>Here is some information how to
  <a href="https://termux.com/ssh.html"
    >start a SSH server in Termux</a>.</p>


<h2>As root</h2>
<!-- ============================================================ -->

<p>In this approach, you do not start the Termux app. Instead you
start the Linux layer of Termux from inside TTerm. It requires a
  <a href="../rooting.xhtml"
     >rooted device</a>.</p>

<p>This seems to work, except that Emacs has problems when you resize
the screen.</p>

<ul>
  <li>Start TTerm and change to root with <c>su</c>, or to the
  Termux user. To find out the Termux user, start Termux and enter
  <c>whoami</c>, then return to TTerm. On my device it runs as
  user <c>u0_a146</c>, so I change to it with <c>su
  u0_a146</c>.</li>

  <li>Set the environment variables <c>$PREFIX</c>,
  <c>$LD_LIBRARY_PATH</c> and <c>$PATH</c>:
  
    <p class="indent code">
    export PREFIX=/data/data/com.termux/files/usr<br/>
    export LD_LIBRARY_PATH=$PREFIX/lib<br/>
    export PATH=$PREFIX/bin:$PREFIX/bin/applets</p>
  </li>
</ul>

<p>That's it, now you can start a Termux command, e.g.
<c>bash</c> or <c>emacs</c> (after installing it with
<c>apt install emacs</c>).</p>

<!-- ************************************************************ -->

<footer>
  <hr/>
  <p>Copyright (C) 2014-2018 
  <a href="mailto:thorbj.hansen@gmail.com?subject=TTerm"
     >Thorbjørn Hansen</a></p>
</footer>
</body>
</html>
