<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
<html xmlns="http://www.w3.org/1999/xhtml">
<!--  
 * Copyright (C) 2014-2018 Thorbjørn Hansen.
 * 
 * The help content is *not* under an Apache License. I have not
 * decided on its license yet. Contact me at thorbj.hansen@gmail.com
 * if you want to copy, publish or use it outside of TTerm.
-->
<head>
  <title>TTerm – Termux</title>
  <!-- Also injects CSS style sheets. -->
  <script>prefix="../";</script>
  <script src="../lib/doc.js"/>
</head>
<body>

<div class="header">TTerm – Termux</div>

<p><a href="../shells.xhtml">
  Back to chapter "Shells and distributions".</a></p>

<p id="thh-toc-toc"></p>


<h1>About Termux</h1>
<!-- ************************************************************ -->

<p>Android's Linux layer is very small. The excellent app
  <a href="https://termux.com"
     >Termux</a>
is a Linux distribution that extends Android's Linux with lots of
packages. It runs on Android's Linux and file system, not using
<code>chroot</code> or <code>proot</code> like
  <a href="debian.xhtml" >GNURoot Debian</a>
does. It doesn't require <a href="rooting">rooting</a>. And it has
  <a href="emacs.xhtml" > Emacs</a>, 
hooray!</p>


<h1>Running Termux in TTerm</h1>
<!-- ************************************************************ -->

<p>Termux has its own terminal emulator, but you can use TTerm
instead. (Currently the terminal emulator of Termux handles resizing
better than TTerm, but provides less settings, so try both before you
choose one, or wait until TTerm improves. :-)</p>


<h2 id="run/connect">Connect to Termux</h2>
<!-- ============================================================ -->

<p>In these three approaches, you start Termux and start a program
that you connect to from TTerm.</p>


<h3 id="run/connect/netcat">With Netcat</h3>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<p>You can connect to Termux via Netcat. Below is a <b>proof of
concept</b>. It will let <b>anybody</b> connect to port 1111
<b>without</b> asking for a password. That's <b>not</b> something you
want to do regularly.</p>

<p>I found the solution on 
  <a href="https://stackoverflow.com/questions/29317933"
    >Stack Overflow</a>.</p>

<p>In Termux, install Busybox:</p>

<p class="indent code">
  apt install busybox
</p>

<p>In Termux, start Netcat and a shell, connected with a "named
pipe".</p>

<dl class="code-commented">
  <dt>cd ~</dt>
  <dd>Change to a writable directory, e.g. <code>$HOME</code>.</dd>

  <dt>rm -f pipe</dt>
  <dd>If necessary, remove the named pipe from a previous run.</dd>

  <dt>mkfifo pipe</dt>
  <dd>Make a "named pipe", also called a "FIFO" ("First In, First
    Out"). That is a file that connects two processes with a
    bidirectional pipe.</dd>

  <dt>script -q &lt; pipe | nc -l -p 1111 &gt; pipe</dt>
  <dd>
    <p><code>nc</code> is the BusyBox version of Netcat. It will read
    input from port 1111 and write it to <code>pipe</code>. In GNURoot
    Debian you must use <code>netcat</code> instead.</p>
    
    <p><code>script -q</code> starts a shell that reads input from
    <code>pipe</code> and writes input and output to
    <code>netcat</code>, which writes it to port 1111.</p>
    
    <p>In Termux the command stops when you log out in TTerm, in
    GNURoot Debian you have to stop it with <key>Ctrl+c.</key></p>
  </dd>
</dl>

<p>Now change to TTerm with an installed 
  <a href="busybox.xhtml">BusyBox</a> 
and enter this in a single line:
</p>
  
<dl class="code-commented">
  <dt>stty -icanon -echo; netcat localhost 1111; stty sane</dt>
  <dd>
    <p>If you do not enter all three commands in one line, you can't see
    what you type for the second and third commands.</p>

    <p>The first command <code>stty -icanon -echo</code> sets the
    terminal settings.</p>
    
    <p><code>-icanon</code> turns off canonical mode (also called
    line-based or cooked mode) so that characters are sent immediately
    without waiting for a newline charate.</p>

    <p><code>-echo</code> turns off echoing, so that the shell on
    Termux decides when to echo user input.</p>

    <p>The second command <code>netcat localhost 111</code> connects
    to the Netcat running on port 1111 of the same device. If
    <code>localhost</code> does not work, try <code>127.0.0.1</code>
    instead.</p>

    <p>After you quit the shell that runs remotely in Termux, the
    third command <code>stty sane</code> sets the terminal settings
    back to their default.</p>
  </dd>
</dl>


<h3 id="run/connect/telnet">With Telnet</h3>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<p>You can connect to Termux via Telnet. Below is a <b>proof of
concept</b>. It will let <b>anybody</b> connect to port 2323
<b>without</b> asking for a password. That's <b>not</b> something you
want to do regularly.</p>

<p>In Termux, install Busybox:</p>

<p class="indent code">
  apt install busybox
</p>

<p>Start a Telnet daemon in Termux:</p>

<dl class="code-commented">
  <dt>telnetd -p 2323 -l bash -F</dt>
  <dd>
    <p><code>-p 2323</code> makes the Telnet daemon listen to port
    2323. The port must be over 1024.</p>
  
    <p><code>-l bash</code> makes it run the shell <code>bash</code>
    instead of <code>login</code>.</p>

    <p><code>-F</code> makes it run in the foreground.</p>
  </dd>
</dl>

<p>In TTerm with an installed 
  <a href="busybox.xhtml">BusyBox</a>, 
do the following:</p>

<dl class="code-commented">
  <dt>telnet localhost 2323</dt>
  <dd>Telnet connects to port 2323 on the same device. If
  <code>localhost</code> does not work, try <code>127.0.0.1</code>
  instead.</dd>
</dl>

<p>When you've finished testing, stop the Telnet daemon in Termux with
<key>Ctrl+c</key>.</p>


<h3>With SSH</h3>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<p class="TODO">LATER I will write about this when I've found a SSH
client that runs in TTerm.</p>

<p>Here is some information how to
  <a href="https://termux.com/ssh.html"
    >start a SSH server in Termux</a>.</p>


<h2>As root</h2>
<!-- ============================================================ -->

<p>In this approach, you do not start the Termux app. Instead you
start the Linux layer of Termux from inside TTerm. It requires a
  <a href="../rooting.xhtml"
     >rooted device</a>.</p>

<p>This seems to work, except that Emacs has problems when you resize
the screen.</p>

<ul>
  <li>Start TTerm and change to root with <code>su</code>, or to the
  Termux user. To find out the Termux user, start Termux and enter
  <code>whoami</code>, then return to TTerm. On my device it runs as
  user <code>u0_a146</code>, so I change to it with <code>su
  u0_a146</code>.</li>

  <li>Set the environment variables <code>$PREFIX</code>,
  <code>$LD_LIBRARY_PATH</code> and <code>$PATH</code>:
  
    <p class="indent code">
    export PREFIX=/data/data/com.termux/files/usr<br/>
    export LD_LIBRARY_PATH=$PREFIX/lib<br/>
    export PATH=$PREFIX/bin:$PREFIX/bin/applets</p>
  </li>
</ul>

<p>That's it, now you can start a Termux command, e.g.
<code>bash</code> or <code>emacs</code> (after installing it with
<code>apt install emacs</code>).</p>

<!-- ************************************************************ -->

<footer>
  <hr/>
  <p>Copyright (C) 2014-2018 
  <a href="mailto:thorbj.hansen@gmail.com?subject=TTerm"
     >Thorbjørn Hansen</a></p>
</footer>
</body>
</html>
